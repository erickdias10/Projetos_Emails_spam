# -*- coding: utf-8 -*-
"""Emails_spam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lJzbB-uV3CLCaCh8cdhDuLXN2DlPAmDh
"""

# Importação das bibliotecas necessárias
import pandas as pd  # Biblioteca usada para manipulação de dados
from sklearn.model_selection import train_test_split  # Para dividir o conjunto de dados em treinamento e teste
from sklearn import metrics  # Fornece métricas para avaliação de modelos
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report  # Métricas específicas de classificação
from sklearn.ensemble import RandomForestClassifier  # Classificador de Floresta Aleatória
from sklearn.feature_extraction.text import TfidfVectorizer  # Para transformar texto em representações numéricas baseadas em TF-IDF

# Carregando arquivos CSV no ambiente Colab
from google.colab import files  # Módulo para upload de arquivos no Colab
uploaded = files.upload()  # Permite ao usuário fazer upload de arquivos, neste caso, espera-se o arquivo 'spam.csv'

# Leitura do arquivo CSV carregado e visualização das primeiras linhas do conjunto de dados
spam = pd.read_csv('emails_spam.csv', encoding='latin-1')  # Lê o CSV com codificação Latin-1
spam.head()  # Exibe as primeiras 5 linhas do dataset para inspeção

# Verifica o número de linhas e colunas no conjunto de dados
spam.shape  # Retorna o formato (número de linhas, número de colunas)

# Contagem de valores para a coluna "Category" (Spam ou Ham)
spam["spam"].value_counts()  # Mostra quantos rótulos 'spam' e 'ham' existem no conjunto de dados

# Divisão das colunas de previsores e variável target
previ = spam["text"]  # Seleciona a coluna de mensagens (previsores)
classe = spam["spam"]  # Seleciona a coluna de categorias (alvo: Spam ou Ham)

# Inicializa o vetorizador TF-IDF, que transforma o texto em uma representação numérica (pesos TF-IDF)
vetorizador = TfidfVectorizer()

# Ajusta e transforma o texto em uma matriz esparsa de previsores numéricos usando o modelo TF-IDF
previsores = vetorizador.fit_transform(previ)
print(previsores.shape)  # Exibe o tamanho da matriz resultante (número de amostras e número de palavras únicas/vocabulário)

# Mostra uma amostra dos nomes das features (palavras) após a transformação TF-IDF
print(vetorizador.get_feature_names_out()[10:100])  # Exibe as palavras entre as posições 10 e 100 no vocabulário TF-IDF

# Divide o conjunto de dados em dados de treinamento (70%) e de teste (30%)
X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(previsores, classe, test_size=0.30)

# Verifica a forma dos dados de teste
X_teste.shape  # Retorna o formato da matriz de teste

# Cria o classificador Floresta Aleatória com 500 árvores de decisão
floresta = RandomForestClassifier(n_estimators = 500)

# Treina o modelo usando os dados de treinamento
floresta.fit(X_treinamento, y_treinamento)

# Faz previsões com o modelo treinado usando o conjunto de teste
previsoes = floresta.predict(X_teste)
print(previsoes)  # Exibe as previsões para cada amostra do conjunto de teste

# Exibir as primeiras 10 previsões
print("Primeiras previsões:")
print(previsoes[:10])

# Exibir 10 previsões do meio do conjunto
meio = len(previsoes) // 2
print("\nPrevisões do meio:")
print(previsoes[meio:meio+10])

# Exibir as últimas 10 previsões
print("\nÚltimas previsões:")
print(previsoes[-10:])

# Avaliação do modelo - Métricas de precisão
print(accuracy_score(y_teste, previsoes))  # Calcula e imprime a precisão (accuracy) do modelo

# Geração do relatório de classificação contendo precisão, recall e F1-score
print(metrics.classification_report(y_teste, previsoes))  # Relatório detalhado com métricas para cada classe (spam e ham)